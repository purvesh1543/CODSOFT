import tkinter as tk

class Calculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculator")

        self.expression = ""
        self.input_text = tk.StringVar()

        self.input_frame = tk.Frame(self.root)
        self.input_frame.pack()

        self.input_field = tk.Entry(self.input_frame, textvariable=self.input_text, font=('arial', 18, 'bold'), bd=10, insertwidth=4, width=14, borderwidth=4)
        self.input_field.grid(row=0, column=0)
        # Remove the following line to avoid errors
        # self.input_field.pack(ipady=10)

        self.buttons_frame = tk.Frame(self.root)
        self.buttons_frame.pack()

        # First row
        self.clear = tk.Button(self.buttons_frame, text="C", width=32, height=3, command=self.clear_expression)
        self.clear.grid(row=0, column=0, columnspan=3)
        self.divide = tk.Button(self.buttons_frame, text="/", width=10, height=3, command=lambda: self.update_expression("/"))
        self.divide.grid(row=0, column=3)

        # Second row
        self.seven = tk.Button(self.buttons_frame, text="7", width=10, height=3, command=lambda: self.update_expression("7"))
        self.seven.grid(row=1, column=0)
        self.eight = tk.Button(self.buttons_frame, text="8", width=10, height=3, command=lambda: self.update_expression("8"))
        self.eight.grid(row=1, column=1)
        self.nine = tk.Button(self.buttons_frame, text="9", width=10, height=3, command=lambda: self.update_expression("9"))
        self.nine.grid(row=1, column=2)
        self.multiply = tk.Button(self.buttons_frame, text="*", width=10, height=3, command=lambda: self.update_expression("*"))
        self.multiply.grid(row=1, column=3)

        # Third row
        self.four = tk.Button(self.buttons_frame, text="4", width=10, height=3, command=lambda: self.update_expression("4"))
        self.four.grid(row=2, column=0)
        self.five = tk.Button(self.buttons_frame, text="5", width=10, height=3, command=lambda: self.update_expression("5"))
        self.five.grid(row=2, column=1)
        self.six = tk.Button(self.buttons_frame, text="6", width=10, height=3, command=lambda: self.update_expression("6"))
        self.six.grid(row=2, column=2)
        self.subtract = tk.Button(self.buttons_frame, text="-", width=10, height=3, command=lambda: self.update_expression("-"))
        self.subtract.grid(row=2, column=3)

        # Fourth row
        self.one = tk.Button(self.buttons_frame, text="1", width=10, height=3, command=lambda: self.update_expression("1"))
        self.one.grid(row=3, column=0)
        self.two = tk.Button(self.buttons_frame, text="2", width=10, height=3, command=lambda: self.update_expression("2"))
        self.two.grid(row=3, column=1)
        self.three = tk.Button(self.buttons_frame, text="3", width=10, height=3, command=lambda: self.update_expression("3"))
        self.three.grid(row=3, column=2)
        self.add = tk.Button(self.buttons_frame, text="+", width=10, height=3, command=lambda: self.update_expression("+"))
        self.add.grid(row=3, column=3)

        # Fifth row
        self.zero = tk.Button(self.buttons_frame, text="0", width=21, height=3, command=lambda: self.update_expression("0"))
        self.zero.grid(row=4, column=0, columnspan=2)
        self.decimal = tk.Button(self.buttons_frame, text=".", width=10, height=3, command=lambda: self.update_expression("."))
        self.decimal.grid(row=4, column=2)
        self.equals = tk.Button(self.buttons_frame, text="=", width=10, height=3, command=self.evaluate_expression)
        self.equals.grid(row=4, column=3)

    def update_expression(self, value):
        self.expression += value
        self.input_text.set(self.expression)

    def clear_expression(self):
        self.expression = ""
        self.input_text.set(self.expression)

    def evaluate_expression(self):
        try:
            result = str(eval(self.expression))
            self.input_text.set(result)
            self.expression = result
        except:
            self.input_text.set("Error")
            self.expression = ""

if __name__ == "__main__":
    root = tk.Tk()
    app = Calculator(root)
    root.mainloop()
